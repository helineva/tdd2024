
import { beforeEach, describe, test } from "vitest";
import { expect } from "chai";
import { Board } from "../src/Board.mjs";
import { ArikaTetromino } from "../src/ArikaTetromino.mjs";

describe("Falling tetrominoes", () => {
  let board;
  beforeEach(() => {
    board = new Board(10, 6);
  });

  test("can be rotated left/counterclockwise", () => {
    board.drop(ArikaTetromino.T_SHAPE);
    board.tick();
    board.rotateLeft();

    expect(board.toString()).to.equalShape(
      `....T.....
       ....TT....
       ....T.....
       ..........
       ..........
       ..........`
    );
  });

  test("can be rotated right/clockwise", () => {
    board.drop(ArikaTetromino.T_SHAPE);
    board.tick();
    board.rotateRight();

    expect(board.toString()).to.equalShape(
      `....T.....
       ...TT.....
       ....T.....
       ..........
       ..........
       ..........`
    );
  });

  test("can be rotated left/counterclockwise twice", () => {
    board.drop(ArikaTetromino.T_SHAPE);
    board.tick();
    board.rotateLeft();
    board.rotateLeft();

    expect(board.toString()).to.equalShape(
      `..........
       ....T.....
       ...TTT....
       ..........
       ..........
       ..........`
    );
  });

  test.skip("can be rotated right/clockwise twice", () => {
    board.drop(ArikaTetromino.T_SHAPE);
    board.tick();
    board.rotateRight();
    board.rotateRight();

    expect(board.toString()).to.equalShape(
      `..........
       ....T.....
       ...TTT....
       ..........
       ..........
       ..........`
    );
  });

  test("can not be rotated if there is no room", () => {
    board.setBoard(
`..........
..........
......T...
.....TTT..
......T...
.....TTT..`
    );
    board.drop(ArikaTetromino.T_SHAPE);
    for (let i = 0; i < 4; i++) board.moveRight();
    board.tick();
    board.rotateLeft();
    board.tick();
    board.tick();
    board.rotateRight();

    expect(board.toString()).to.equalShape(
      `..........
       ..........
       ......T.T.
       .....TTTTT
       ......T.T.
       .....TTT..`
    );
  });

  test("can be rotated next to another block", () => {
    board.setBoard(
`..........
..........
....T.....
...TTT....
....T.....
...TTT....`
    );
        
    board.drop(ArikaTetromino.T_SHAPE);
    board.moveRight();
    board.moveRight();
    board.tick();
    board.tick();
    board.rotateRight();

    expect(board.toString()).to.equalShape(
      `..........
       ......T...
       ....TTT...
       ...TTTT...
       ....T.....
       ...TTT....`
    );
  });

  test("will move away from the left wall when rotated left next to it", () => {
    board.drop(ArikaTetromino.T_SHAPE);
    board.tick();
    board.rotateLeft();
    for (let i = 0; i < 4; i++) board.moveLeft();
    board.rotateLeft();

    expect(board.toString()).to.equalShape(
      `..........
       .T........
       TTT.......
       ..........
       ..........
       ..........`
    );
  });

  test("will move away from the left wall when rotated right next to it", () => {
    board.drop(ArikaTetromino.T_SHAPE);
    board.tick();
    board.rotateLeft();
    for (let i = 0; i < 4; i++) board.moveLeft();
    board.rotateRight();

    expect(board.toString()).to.equalShape(
      `..........
       TTT.......
       .T........
       ..........
       ..........
       ..........`
    );
  });

  test("will move away from the right wall when rotated left next to it", () => {
    board.drop(ArikaTetromino.T_SHAPE);
    board.tick();
    board.rotateRight();
    for (let i = 0; i < 5; i++) board.moveRight();
    board.rotateLeft();

    expect(board.toString()).to.equalShape(
      `..........
       .......TTT
       ........T.
       ..........
       ..........
       ..........`
    );
  });

  test("will move away from the right wall when rotated right next to it", () => {
    board.drop(ArikaTetromino.T_SHAPE);
    board.tick();
    board.rotateRight();
    for (let i = 0; i < 5; i++) board.moveRight();
    board.rotateRight();

    expect(board.toString()).to.equalShape(
      `..........
       ........T.
       .......TTT
       ..........
       ..........
       ..........`
    );
  });

  test("will move two steps away (I-shape) from the left wall when rotated next to it", () => {
    board.drop(ArikaTetromino.I_SHAPE);
    board.tick();
    board.rotateRight();
    for (let i = 0; i < 5; i++) board.moveLeft();
    board.rotateLeft();

    expect(board.toString()).to.equalShape(
      `..........
       IIII......
       ..........
       ..........
       ..........
       ..........`
    );
  });

  test("will move two steps away (I-shape) from the right wall when rotated next to it", () => {
    board.drop(ArikaTetromino.I_SHAPE);
    board.tick();
    board.rotateRight();
    for (let i = 0; i < 4; i++) board.moveRight();
    board.rotateLeft();

    expect(board.toString()).to.equalShape(
      `..........
       ......IIII
       ..........
       ..........
       ..........
       ..........`
    );
  });

  test("will move away from a block to the right when rotated left next to it", () => {
    board.setBoard(
`..........
..........
...I......
...I......
...I......
...I......`
    );
    board.drop(ArikaTetromino.T_SHAPE);
    board.tick();
    board.rotateLeft();
    board.tick();
    board.rotateLeft();
    
    expect(board.toString()).to.equalShape(
      `..........
       ..........
       ...I.T....
       ...ITTT...
       ...I......
       ...I......`
    );
  });

  test("will move away from a block to the right when rotated right next to it", () => {
    board.setBoard(
`..........
..........
...I......
...I......
...I......
...I......`
);
    board.drop(ArikaTetromino.T_SHAPE);
    board.tick();
    board.rotateLeft();
    board.tick();
    board.rotateRight();
    
    expect(board.toString()).to.equalShape(
      `..........
       ..........
       ...ITTT...
       ...I.T....
       ...I......
       ...I......`
    );
  });

  test("will move away from a block to the left when rotated left next to it", () => {
    board.setBoard(
`..........
..........
.....I....
.....I....
.....I....
.....I....`
);
    board.drop(ArikaTetromino.T_SHAPE);
    board.tick();
    board.rotateRight();
    board.tick();
    board.rotateLeft();

    expect(board.toString()).to.equalShape(
        `..........
         ..........
         ..TTTI....
         ...T.I....
         .....I....
         .....I....`
        );
    });

  test.skip("will move away from a block to the left when rotated right next to it", () => {
    board.setBoard(
`..........
..........
.....I....
.....I....
.....I....
.....I....`
);
    board.drop(ArikaTetromino.T_SHAPE);
    board.tick();
    board.rotateRight();
    board.tick();
    board.rotateRight();
        
    expect(board.toString()).to.equalShape(
        `..........
         ..........
         ...T.I....
         ..TTTI....
         .....I....
         .....I....`
        );
    });
});

